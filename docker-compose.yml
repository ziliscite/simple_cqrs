version: '3.8'
services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - .volumes/postgres_data:/var/lib/postgresql/data
    networks:
      - my_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: 12345
    volumes:
      - .volumes/rabbitmq_data:/var/lib/rabbitmq
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: elasticsearch:8.12.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - .volumes/elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - my_network
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.0-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - .volumes/redis_data:/data
    environment:
      - REDIS_USER=${REDIS_USER}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DATABASE=${REDIS_DATABASE}
    networks:
      - my_network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  product_service:
    build:
      context: ./product
      dockerfile: product.dockerfile
    container_name: product
    ports:
      - "8080:8080"
    environment:
      - HTTP_HOST=${PRODUCT_HOST}
      - HTTP_PORT=${PRODUCT_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_SSL=${POSTGRES_SSL}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
      - RABBITMQ_QUEUE=${RABBITMQ_QUEUE}
      - RABBITMQ_BINDING=${RABBITMQ_BINDING}
      - RABBITMQ_EXCHANGE=${RABBITMQ_EXCHANGE}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - my_network

  search_service:
    build:
      context: ./search
      dockerfile: search.dockerfile
    container_name: search
    ports:
      - "3000:3000"
    environment:
      - HTTP_HOST=${SEARCH_HOST}
      - HTTP_PORT=${SEARCH_PORT}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
      - RABBITMQ_QUEUE=${RABBITMQ_QUEUE}
      - RABBITMQ_BINDING=${RABBITMQ_BINDING}
      - RABBITMQ_EXCHANGE=${RABBITMQ_EXCHANGE}
      - ELASTICSEARCH_HOST=${ELASTICSEARCH_HOST}
      - ELASTICSEARCH_PORT=${ELASTICSEARCH_PORT}
      - ELASTICSEARCH_INDEX=${ELASTICSEARCH_INDEX}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_USER=${REDIS_USER}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DATABASE=${REDIS_DATABASE}
      - REDIS_TTL=${REDIS_TTL}
    depends_on:
      rabbitmq:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
      product_service:
        condition: service_started
    networks:
      - my_network

volumes:
  postgres_data:
  rabbitmq_data:
  elasticsearch_data:
  redis_data:

networks:
  my_network:
    driver: bridge